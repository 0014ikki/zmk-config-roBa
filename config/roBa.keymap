#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
    hold-while-undecided-linger;
};

/ {
    combos {
        compatible = "zmk,combos";

        BT0 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <6 7>;
        };

        BT1 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <18 19>;
        };

        BT2 {
            bindings = <&bt BT_SEL 2>;
            key-positions = <30 31>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        square_brackets: square_brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RBKT &kp ENTER &kp LEFT>;
            label = "square_brackets";
        };

        parentheses: parentheses {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp ENTER &kp LEFT>;
            label = "parentheses";
        };

        curly_brackets: curly_brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp ENTER &kp LEFT>;
            label = "curly_brackets";
        };

        angle_brackets: angle_brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp GT &kp ENTER &kp LEFT>;
            label = "ANGLE_BRACKETS";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        td_mt: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&sys_reset>, <&bootloader>;
        };

        td_lang: td_lang {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LANG";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_1>, <&kp LANGUAGE_2>;
        };

        mt_single: mt_single {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_SINGLE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q       &kp W         &kp E             &kp R     &kp T                                                     &kp Y        &kp U    &kp I      &kp O    &mt_single EQUAL P
&kp A       &kp S         &lt 3 D           &lt 2 F   &kp G          &kp LC(TAB)         &square_brackets       &kp H        &lt 2 J  &lt 3 K    &kp L    &mt_single SEMICOLON MINUS
&kp Z       &kp X         &kp C             &kp V     &kp B          &kp TAB             &parentheses           &kp N        &kp M    &kp COMMA  &kp DOT  &mt_single SQT SLASH
&kp ESCAPE  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LCMD  &kp BACKSPACE  &kp LEFT_SHIFT      &mt RIGHT_SHIFT SPACE  &lt 1 ENTER                               &lt 4 NON_US_BACKSLASH
            >;
        };

        NUM {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PLUS                               &kp CARET     &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5    &trans      &curly_brackets  &kp NUMBER_6  &kp N7         &kp N8        &kp N9                &kp N0
&kp F1           &kp F2        &kp F3        &kp F4        &kp F5    &trans      &angle_brackets  &kp F6        &kp F7         &kp F8        &kp F9                &trans
&trans           &trans        &trans        &trans        &trans    &trans      &trans           &trans                                                           &trans
            >;
        };

        FUNCTION {
            bindings = <
&kp ESC  &kp LG(LEFT)          &kp LG(UP)            &kp LG(RIGHT)          &trans                                      &trans  &kp LG(LBKT)  &kp LC(UP)  &kp LG(RBKT)  &kp LG(LS(LC(NUMBER_4)))
&kp TAB  &kp LG(N1)            &kp LG(N2)            &kp LG(N3)             &trans          &trans              &trans  &trans  &mkp MB1      &mo 5       &mkp MB2      &trans
&trans   &kp LS(LA(LC(LEFT)))  &kp LS(LA(LC(DOWN)))  &kp LS(LA(LC(RIGHT)))  &trans          &trans              &trans  &trans  &trans        &trans      &trans        &trans
&td_mt   &trans                &trans                &trans                 &kp LANGUAGE_1  &kp LANGUAGE_2      &trans  &trans                                          &td_mt
            >;
        };

        CONTROL {
            bindings = <
&trans  &trans  &kp LC(E)  &trans     &trans                      &trans    &trans    &trans  &trans     &trans
&trans  &trans  &trans     &trans     &trans  &trans      &trans  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans
&trans  &trans  &kp LC(C)  &kp LC(V)  &trans  &trans      &trans  &trans    &trans    &trans  &trans     &trans
&trans  &trans  &trans     &trans     &trans  &trans      &trans  &trans                                 &trans
            >;
        };

        Bluetooth {
            bindings = <
&trans  &trans  &trans  &trans  &trans                              &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &bt BT_CLR          &trans  &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &bt BT_CLR_ALL      &trans  &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans                                                  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
